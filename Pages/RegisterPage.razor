@page "/register"
@using EnhancedOasis.Models;
@using DataLibrary

@inject IDataAccess _data
@inject IConfiguration _config

@inject ActiveAccount _ActiveAccount 

<link href="./css/general-styles.css" rel="stylesheet" />
<link href="./css/RegisterPage.css" rel="stylesheet" />
@* FONT AWESOME CDN *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<div class="page">
    @if(_ActiveAccount.ID != 0) {
    <NavBar PageTitle="Register For Courses" />
    @if(success != 0) {
        <div class="Success">
            <h2 class="SuccessMessage">Courses have been registered!</h2>
        </div>
    }
    @if(failure != 0) {
        <div class="Failure">
            <h2 class="FailureMessage">There has either been an error connecting to the database or you are trying to register for a course that you are already enrolled in!</h2>
        </div>
    }
    <div class="container">
        <form class="registerForm">
            <div class="register register-grid">
                @* FIRST ROW / HEADER *@
                <div class="grid-row grid-header">
                    <div class="gi gi-1 gi-header">CRN</div>
                    <div class="gi gi-2 gi-header">Department</div>
                    <div class="gi gi-3 gi-header">Credits</div>
                    <div class="gi gi-4 gi-header">Course</div>
                    <div class="gi gi-5 gi-header">Day</div>
                    <div class="gi gi-6 gi-header">Start Time</div>
                    <div class="gi gi-7 gi-header">End Time</div>
                    <div class="gi gi-8 gi-header">Capacity</div>
                    <div class="gi gi-9 gi-header">Active</div>
                    <div class="gi gi-10 gi-header">Remaining</div>
                </div>
                @* SECOND ROW *@
                @for(int i = 0; i < allCourses.Count; i++) {
                    int x = allCourses[i].CourseID;
                    <div class="grid-row">
                        <input type="checkbox" name="selectItem" class="selector" @onclick="() => checkbox(x)" />
                        <div class="gi">@allCourses[i].CourseID</div>
                        <div class="gi">@allCourses[i].Department</div>
                        <div class="gi">@allCourses[i].Credits</div>
                        <div class="gi">@allCourses[i].Course_Name</div>
                        <div class="gi">@allCourses[i].Days</div>
                        <div class="gi">@convertTime(allCourses[i].StartTime)</div>
                        <div class="gi">@convertTime(allCourses[i].EndTime)</div>
                        <div class="gi">@allCourses[i].Capacity</div>
                        <div class="gi">@allCourses[i].Active</div>
                        <div class="gi">@allCourses[i].Remaining</div>
                    </div>
                }
            </div>
            <button type="button" class="formButton" @onclick="registerCoursesAsync">Register for selected courses!</button>
        </form>
    </div>
    } else {
        <LogInMessage />
    }
</div>

@code {
    private List<Course> allCourses = new List<Course>();
    private List<int> selectedCourses = new List<int>();
    private int success = 0;
    private int failure = 0;

    private void checkbox(int courseID)
    {
        if(selectedCourses.Contains(courseID))
        {
            selectedCourses.Remove(courseID);
        } else
        {
            selectedCourses.Add(courseID);
        }
    }

    private async Task registerCoursesAsync()
    {
        string registerQuery = "INSERT INTO Register(StudentID, CourseID) VALUES (@studentID, @courseID)";

        // Executing the query and setting the parameters from above
        for(int i = 0; i < selectedCourses.Count; i++){
            try
            {
                await _data.SaveData(registerQuery, new
                {
                    // Setting the parameters
                    studentID = _ActiveAccount.ID,
                    courseID = selectedCourses[i],
                }, _config.GetConnectionString("DataConnection"));
            } catch
            {
                failure = 1;
                if(failure == 1)
                {
                    success = 0;
                }
                return;
            }
        }
        registerQuery = "UPDATE Course SET Active = Active + 1, Remaining = Remaining - 1 WHERE CourseID = @courseID";
        for(int i = 0; i < selectedCourses.Count; i++){
            try
            {
                await _data.SaveData(registerQuery, new
                {
                    // Setting the parameters
                    courseID = selectedCourses[i],
                }, _config.GetConnectionString("DataConnection"));
            } catch
            {
                failure = 1;
                if(failure == 1)
                {
                    success = 0;
                }
                return;
            }
        }
        success = 1;
        if(success == 1)
        {
            failure = 0;
        }
    }

    private string convertTime(TimeSpan time)
    {
        return new DateTime().Add(time).ToShortTimeString();
    }

    protected override async Task OnInitializedAsync()
    {
        List<Course> courses = new List<Course>(); 

        string sql = "SELECT * FROM Course";

        courses = await _data.LoadData<Course, dynamic>(sql, new { }, _config.GetConnectionString("DataConnection"));
        allCourses = courses;
    }
}
